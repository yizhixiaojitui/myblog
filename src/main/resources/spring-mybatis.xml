<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="cn.broccoli.blog" />

    <!-- 引入配置文件 -->
   
 	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"  />  
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${name}" />
        <property name="password" value="${password}" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>

        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>

        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>

        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>

        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />
        
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true"/>
        
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能--> 
        <property name="testOnReturn" value="false" />
        
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
          
            <property name="poolPreparedStatements" value="true" />
            <property name="maxOpenPreparedStatements" value="20" />
        
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计   开启web监控、开启sql防火墙 -->  
         <property name="filters" value="stat,wall" /> 
         
         
    </bean>

	<!-- 慢SQL记录 -->
    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
        <property name="slowSqlMillis" value="5"/>
        <property name="logSlowSql" value="true"/>
    </bean>
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:cn/broccoli/blog/mapper/*.xml" />
        <property name="configLocation" value="classpath:/mybatis-config.xml" />
    </bean>

	  
    <!-- 5.使用中间类解决RedisCache.RedisTemplate的静态注入，从而使MyBatis实现第三方缓存 -->
    <bean id="redisCacheTransfer" class="cn.broccoli.blog.redis.RedisCacheTransfer">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.broccoli.blog.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 开启注解进行事务管理   transaction-manager：引用上面定义的事务管理器-->  
    <tx:annotation-driven transaction-manager="transactionManager"/>

    
	<import resource="spring-redis.xml"/>
</beans>
