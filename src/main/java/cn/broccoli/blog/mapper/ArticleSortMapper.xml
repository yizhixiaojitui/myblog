<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.broccoli.blog.mapper.ArticleSortMapper" > 
  <resultMap id="BaseResultMap" type="cn.broccoli.blog.po.ArticleSort" >
    <id column="sort_article_id" property="sortArticleId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="sort_article_name" property="sortArticleName" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="LimitResultMap" type="cn.broccoli.blog.utils.SortList" >
    <id column="sort_article_id" property="sortArticleId" jdbcType="INTEGER" />
   <result column="user_nikename" property="userNikename" jdbcType="VARCHAR" />
    <result column="sort_article_name" property="sortArticleName" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    sort_article_id, user_id, sort_article_name
  </sql>
  
  <select id="selectByUserId"  resultType="java.util.HashMap" parameterType="java.lang.Integer">
  select sort_article_id,sort_article_name FROM article_sort where user_id=#{userid};
  </select>
  <select id="selectByName"  resultMap="BaseResultMap" >
  select 
  <include refid="Base_Column_List" />
  FROM article_sort where user_id=#{userid} and  sort_article_name=#{name};
  </select>
  <select id="selectTagsBylimit" resultMap="LimitResultMap">
		select
		A.sort_article_id,A.sort_article_name,U.user_nikename
		from article_sort A inner join user U on A.user_id=U.user_id
		<where>
			U.user_id=#{userid}
			<if test="sortArticleId != null and sortArticleId != ''">
				and A.sort_article_id LIKE CONCAT('%',#{sortArticleId},'%') 
			</if>
			<if test="sortArticleName != null and sortArticleName !=''">
				and A.sort_article_name LIKE CONCAT('%',#{sortArticleName},'%') 
			</if>

		</where>
		 limit #{page},#{limit};
	</select>
   <select id="selectTagBylimitCount" resultType="java.lang.Integer">
		select
		count(*)
		from article_sort A inner join user U on A.user_id=U.user_id
		<where>
			U.user_id=#{userid}
			<if test="sortArticleId != null and sortArticleId != ''">
				and A.sort_article_id LIKE CONCAT('%',#{sortArticleId},'%') 
			</if>
			<if test="sortArticleName != null and sortArticleName !=''">
				and A.sort_article_name LIKE CONCAT('%',#{sortArticleName},'%') 
			</if>

		</where>
	</select>
  <delete id="deleteTagsById" parameterType="java.util.List">
		delete from article_sort where sort_article_id in
		<foreach collection="list" item="ids" open="(" close=")"
			separator=",">
			#{ids.sortArticleId}
		</foreach>
	</delete>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from article_sort
    where sort_article_id = #{sortArticleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article_sort
    where sort_article_id = #{sortArticleId,jdbcType=INTEGER}
  </delete>
 
  <insert id="insert" parameterType="cn.broccoli.blog.po.ArticleSort" >
    insert into article_sort (sort_article_id, user_id, sort_article_name
      )
    values (#{sortArticleId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{sortArticleName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.broccoli.blog.po.ArticleSort" >
    insert into article_sort
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sortArticleId != null" >
        sort_article_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="sortArticleName != null" >
        sort_article_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sortArticleId != null" >
        #{sortArticleId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="sortArticleName != null" >
        #{sortArticleName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="cn.broccoli.blog.po.ArticleSort" >
    update article_sort
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="sortArticleName != null" >
        sort_article_name = #{sortArticleName,jdbcType=VARCHAR},
      </if>
    </set>
    where sort_article_id = #{sortArticleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.broccoli.blog.po.ArticleSort" >
    update article_sort
    set user_id = #{userId,jdbcType=INTEGER},
      sort_article_name = #{sortArticleName,jdbcType=VARCHAR}
    where sort_article_id = #{sortArticleId,jdbcType=INTEGER}
  </update>
  <update id="updateById" parameterType="cn.broccoli.blog.utils.SortList" >
    update article_sort
    set sort_article_name = #{sortArticleName,jdbcType=VARCHAR}
    where sort_article_id = #{sortArticleId,jdbcType=INTEGER}
  </update>
</mapper>