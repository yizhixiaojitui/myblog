<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.broccoli.blog.mapper.UserCommentMapper" >
  <resultMap id="BaseResultMap" type="cn.broccoli.blog.po.UserComment" >
    <id column="c_id" property="cId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="type_id" property="typeId" jdbcType="TINYINT" />
    <result column="commit_id" property="commitId" jdbcType="INTEGER" />
    <result column="commit_content" property="commitContent" jdbcType="VARCHAR" />
    <result column="commit_time" property="commitTime" jdbcType="TIMESTAMP" />
    <result column="commit_ip" property="commitIp" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    c_id, user_id, type_id, commit_id, commit_content, commit_time, commit_ip
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.broccoli.blog.po.UserCommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_comment
    where c_id = #{cId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_comment
    where c_id = #{cId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.broccoli.blog.po.UserCommentExample" >
    delete from user_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.broccoli.blog.po.UserComment" >
    insert into user_comment (c_id, user_id, type_id, 
      commit_id, commit_content, commit_time, 
      commit_ip)
    values (#{cId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{typeId,jdbcType=TINYINT}, 
      #{commitId,jdbcType=INTEGER}, #{commitContent,jdbcType=VARCHAR}, #{commitTime,jdbcType=TIMESTAMP}, 
      #{commitIp,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.broccoli.blog.po.UserComment" >
    insert into user_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="cId != null" >
        c_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="typeId != null" >
        type_id,
      </if>
      <if test="commitId != null" >
        commit_id,
      </if>
      <if test="commitContent != null" >
        commit_content,
      </if>
      <if test="commitTime != null" >
        commit_time,
      </if>
      <if test="commitIp != null" >
        commit_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="cId != null" >
        #{cId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null" >
        #{typeId,jdbcType=TINYINT},
      </if>
      <if test="commitId != null" >
        #{commitId,jdbcType=INTEGER},
      </if>
      <if test="commitContent != null" >
        #{commitContent,jdbcType=VARCHAR},
      </if>
      <if test="commitTime != null" >
        #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commitIp != null" >
        #{commitIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.broccoli.blog.po.UserCommentExample" resultType="java.lang.Integer" >
    select count(*) from user_comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_comment
    <set >
      <if test="record.cId != null" >
        c_id = #{record.cId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null" >
        type_id = #{record.typeId,jdbcType=TINYINT},
      </if>
      <if test="record.commitId != null" >
        commit_id = #{record.commitId,jdbcType=INTEGER},
      </if>
      <if test="record.commitContent != null" >
        commit_content = #{record.commitContent,jdbcType=VARCHAR},
      </if>
      <if test="record.commitTime != null" >
        commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commitIp != null" >
        commit_ip = #{record.commitIp,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_comment
    set c_id = #{record.cId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      type_id = #{record.typeId,jdbcType=TINYINT},
      commit_id = #{record.commitId,jdbcType=INTEGER},
      commit_content = #{record.commitContent,jdbcType=VARCHAR},
      commit_time = #{record.commitTime,jdbcType=TIMESTAMP},
      commit_ip = #{record.commitIp,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.broccoli.blog.po.UserComment" >
    update user_comment
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=TINYINT},
      </if>
      <if test="commitId != null" >
        commit_id = #{commitId,jdbcType=INTEGER},
      </if>
      <if test="commitContent != null" >
        commit_content = #{commitContent,jdbcType=VARCHAR},
      </if>
      <if test="commitTime != null" >
        commit_time = #{commitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commitIp != null" >
        commit_ip = #{commitIp,jdbcType=VARCHAR},
      </if>
    </set>
    where c_id = #{cId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.broccoli.blog.po.UserComment" >
    update user_comment
    set user_id = #{userId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=TINYINT},
      commit_id = #{commitId,jdbcType=INTEGER},
      commit_content = #{commitContent,jdbcType=VARCHAR},
      commit_time = #{commitTime,jdbcType=TIMESTAMP},
      commit_ip = #{commitIp,jdbcType=VARCHAR}
    where c_id = #{cId,jdbcType=INTEGER}
  </update>
</mapper>